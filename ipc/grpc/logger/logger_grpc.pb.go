// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	RegisterDrain(ctx context.Context, in *RegisterDrainRequest, opts ...grpc.CallOption) (*RegisterDrainReply, error)
	ReadDrain(ctx context.Context, in *ReadDrainRequest, opts ...grpc.CallOption) (*ReadDrainReply, error)
	CloseDrain(ctx context.Context, in *CloseDrainRequest, opts ...grpc.CallOption) (*CloseDrainReply, error)
	WatchDrain(ctx context.Context, opts ...grpc.CallOption) (V1_WatchDrainClient, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) RegisterDrain(ctx context.Context, in *RegisterDrainRequest, opts ...grpc.CallOption) (*RegisterDrainReply, error) {
	out := new(RegisterDrainReply)
	err := c.cc.Invoke(ctx, "/logger.V1/RegisterDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ReadDrain(ctx context.Context, in *ReadDrainRequest, opts ...grpc.CallOption) (*ReadDrainReply, error) {
	out := new(ReadDrainReply)
	err := c.cc.Invoke(ctx, "/logger.V1/ReadDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) CloseDrain(ctx context.Context, in *CloseDrainRequest, opts ...grpc.CallOption) (*CloseDrainReply, error) {
	out := new(CloseDrainReply)
	err := c.cc.Invoke(ctx, "/logger.V1/CloseDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) WatchDrain(ctx context.Context, opts ...grpc.CallOption) (V1_WatchDrainClient, error) {
	stream, err := c.cc.NewStream(ctx, &V1_ServiceDesc.Streams[0], "/logger.V1/WatchDrain", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1WatchDrainClient{stream}
	return x, nil
}

type V1_WatchDrainClient interface {
	Send(*WatchDrainRequest) error
	Recv() (*WatchDrainEvent, error)
	grpc.ClientStream
}

type v1WatchDrainClient struct {
	grpc.ClientStream
}

func (x *v1WatchDrainClient) Send(m *WatchDrainRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v1WatchDrainClient) Recv() (*WatchDrainEvent, error) {
	m := new(WatchDrainEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	RegisterDrain(context.Context, *RegisterDrainRequest) (*RegisterDrainReply, error)
	ReadDrain(context.Context, *ReadDrainRequest) (*ReadDrainReply, error)
	CloseDrain(context.Context, *CloseDrainRequest) (*CloseDrainReply, error)
	WatchDrain(V1_WatchDrainServer) error
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) RegisterDrain(context.Context, *RegisterDrainRequest) (*RegisterDrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDrain not implemented")
}
func (UnimplementedV1Server) ReadDrain(context.Context, *ReadDrainRequest) (*ReadDrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDrain not implemented")
}
func (UnimplementedV1Server) CloseDrain(context.Context, *CloseDrainRequest) (*CloseDrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDrain not implemented")
}
func (UnimplementedV1Server) WatchDrain(V1_WatchDrainServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDrain not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_RegisterDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).RegisterDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.V1/RegisterDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).RegisterDrain(ctx, req.(*RegisterDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ReadDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ReadDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.V1/ReadDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ReadDrain(ctx, req.(*ReadDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_CloseDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).CloseDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.V1/CloseDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).CloseDrain(ctx, req.(*CloseDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_WatchDrain_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1Server).WatchDrain(&v1WatchDrainServer{stream})
}

type V1_WatchDrainServer interface {
	Send(*WatchDrainEvent) error
	Recv() (*WatchDrainRequest, error)
	grpc.ServerStream
}

type v1WatchDrainServer struct {
	grpc.ServerStream
}

func (x *v1WatchDrainServer) Send(m *WatchDrainEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v1WatchDrainServer) Recv() (*WatchDrainRequest, error) {
	m := new(WatchDrainRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDrain",
			Handler:    _V1_RegisterDrain_Handler,
		},
		{
			MethodName: "ReadDrain",
			Handler:    _V1_ReadDrain_Handler,
		},
		{
			MethodName: "CloseDrain",
			Handler:    _V1_CloseDrain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDrain",
			Handler:       _V1_WatchDrain_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ipc/grpc/logger/logger.proto",
}
